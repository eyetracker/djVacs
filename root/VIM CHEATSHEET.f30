tComment:
----------------------------------------------------------------------------
----------------------------------------------------------------------------

Primary key maps: 

    <c-_><c-_>   :: :TComment 
    <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END> 
    <c-_>b       :: :TCommentBlock 
    <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE> 
    <c-_>n       :: :TCommentAs &filetype <QUERY COUNT> 
    <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE> 
    <c-_>i       :: :TCommentInline 
    <c-_>r       :: :TCommentRight 
    <c-_>p       :: Comment the current inner paragraph 

As operator (the prefix can be customized via g:tcommentMapLeaderOp1 
and g:tcommentMapLeaderOp2): 

    gc{motion}   :: Toggle comments (for small comments within one line 
                    the &filetype_inline style will be used, if 
                    defined) 
    gcc          :: Toggle comment for the current line 
    gC{motion}   :: Comment region 
    gCc          :: Comment the current line 


----------------------------------------------------------------------------
PYTHON DEBUGGER: PDB
----------------------------------------------------------------------------
import pdb
pdb.set_trace() #to mark an entry point.
l (list): Shows the current code around the line that your on. The line that is about to be executed has a -> before it.
n (next): Executes the current line and moves to the next in the current file.
c (continue): Finishes the debugging session. If there are more breakpoints (or if your set_trace() code gets called again before the request finishes) then you will get back to the debugger, otherwise the requests will complete back to the browser.
s (step): Goes down into the next level of execution (presumably a different file). You can follow your code through Django's internals this way. This is really good for finding bugs and getting a better understanding about how Django works.
w (where): Shows you a backtrace of the calls that have gotten you to the current point in the code execution. This is really handy for the following 2 commands.
u (up): Allows you to go up one level in the backtrace.
d (down): Allows you to go down one level in the backtrace. These two commands allow you to see where you came from, and what variables were called where. This lets you see how the state ended up the current way that it did, which is great for figuring out how to fix it. :)
locals(): This isn't a debugger function, but it is really handy for seeing what is in the current scope that you can muck around with. locals().keys() is really nice too just to see the variables that are there, because request tends to pollute the locals() command.

----------------------------------------------------------------------------
----------------------------------------------------------------------------


