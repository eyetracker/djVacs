Zweck dieses Dokuments:
------
1. Aufbau der Website (des Fragebogens)
    - Model
    - View
    - Controller
2. Theoretische Fragestellungen
3. Software
4. Reihenfolge der Aufgaben
5. Interaktion und Abhängigkeiten


Database ("Model": Definition wie eine Klasse)
-----

1 MAIN: Studie
    Sprache
      
2 Participant
    "Daten P(...)"

3 Choicetask (generierte Choices, sind den Participanten untergeordnet, da diese mehrere Zeilen aus dem Datensatz in sich aufnehmen)
    id
    Anzahl Alternativen: 2-8
    task: array of array, length: anzahl der alternativen x5 (attribute)
    participant: link zu "Daten P", falls nicht gesetzt: unbenutzt!
    grunddaten: Konkrete Ausprägungen der Levels. (Die randomisierte Zusammensetzung einer Choice Task ist unabhängig von den konkreten Grunddaten!)
    id array der dynamic max regret scale


->Daten P:
->-----
Datum
4x Radio Button Questions, static: Begin Radio
4x Likert Scale, static: Begin Likert
Gruppe: {Inc, Dec}
CT {2,3,4,5,6,7,8}
    id ("Version") der CT
    endgültige wahl: "Concept"
CT List (Ergebnis-Liste): "CT - endgültige wahl"
Holdout Choice: HC {1,2,3}
Tournament Selection: TS : Auswahl aus der List aus CT List
    tournament wahl: ct daten + direkte +übersetzung der levels in Grunddaten
18x Likert, dynamic (simple randomisation, equal distribution): Max Regret Scale
    list: position(0-17): original order, content(1-18): displayed question
6x Likert, static: Heuristics
2x Radio, 2x Edit: Demographika
Zeit:
time_pg_x {Seitenzahl} (timestamp nach abschluss der jeweiligen seite x)
Daraus lässt sich "total time" berechnen: (Anfang bis Ende, geschieht nicht automatisch! besteht aus anfangstimestamp und letztem time_pg_x)




Controller:
------

Admin Mask:
-Neue Studie Erstellen
-Einstellungen: Sprache, TestDB Bool, füllen mit Random Daten (n=x)
-StudienMaske: Neuer Teilnehmer, DB Statistik (Overview)

Datensatz aller choice Tasks muss in SQLite eingetragen werden!
-Script oder SQLite GUI Programm?

Script:
-Zuweisen einer Unbenutzten Choice Task zu einem Participanten
-Reset Funktion einbauen, wegen Testzwecken zu Anfang: löschen des "participant"-Links

2-Stufiges Abspeichern:
-Validierung eingegebener Daten (muss eigentlich währned der Eingabe schon abgefangen werden...)
-Absicherung 2 Datenbanken durch andere Schreibmethode! (eigentlich überflüssig... wenn die DB vernünftig implementiert ist, brauche ich keine 2. DB)
ODER
Alternativer Ansatz zur Absicherung: "Ausführliches Testen"
wenn alles sicher und Bugfrei funktioniert, dann bin ich fertig :)

Zufallsgenerator:
Füllung der datenbank mit pseudo ergebnissen:
-Mengen der zulässigen antworten erstellen
-string generator von URLs mit variablen antworten

Export Funktionen aller Ergebnisse

zeit analyse funktion der choice tasks, wie verhält sich die zeit? export der wichtigsten werte davon


Einzelne Tasks:
-----

Manuelle Überprüfung der Kalibrierung:
-Fotos von den Kal. Daten der Abweichung innerhalb von Eyelink II
-Nachverfolgen der einzelnen Seiten mit markierung pro seite, ob {s,m,l} abweichungen, bzw. blaue bereiche ausserhalb der pupille auftreten... dadurch können im nachhinein daten aus dem datensatz geschmissen werden, falls sie sich als invalide herausstellen. Außerdem werden die Daten somit bereits live verifiziert und Aussagen über deren Qualität sofort möglich.

Homogenität der TS Antworten prüfen. Bei all den CT eines jeden Participanten muss eigentlich eine starke Ähnlichkeit hervorkommen.

Reihenfolge der Tasks variabel gestalten, keine endgültige reihenfolge!

    
heuristiken:    
stüttgen paper
satisficing - 
payne, bettmann
"syncing loud"
heuristik speziell auf letzt CT (TS) fragen

ONGOIND PROGRESS:
-------
11.01.2013

begin_radio dreamweaver html steht.
django richtig aufsetzen, temporär, muss unterstützen:
-html laden
-html form an einen beliebigen link schicken
-link muss verarbeitet werden können, zu irgendeinem pseudo output (direkte eingabe)
danach kommt template randomisierung, also funktionen innerhalb der views.py datei... ich bin gespannt :) da wird der eigentlich vorteil von django liegen. kann nur hoffen, dass der rest nicht so viele probleme macht, so dass sich das tatsächlich lohnt...


kyle murray
